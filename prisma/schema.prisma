generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model (extends NextAuth)
model User {
  id                    String          @id @default(cuid())
  name                  String?
  email                 String?         @unique
  emailVerified         DateTime?
  image                 String?
  isAdmin               Boolean         @default(false)
  lastInteractionDate   DateTime?       // Last time user interacted with the site
  lastPromotionEmailDate DateTime?      // Last time promotion email was sent
  emailNotifications    Boolean         @default(true)   // Master email notifications toggle
  briefInterestUpdates  Boolean         @default(true)   // Brief interaction notifications
  promotionalNotifications Boolean      @default(true)   // Promotional/re-engagement notifications
  accounts              Account[]
  sessions              Session[]
  briefs                Brief[]         // Research briefs created by the user
  reviews               Review[]        // Reviews created by the user
  briefUpvotes          BriefUpvote[]   // Upvotes given by the user to briefs
  reviewUpvotes         ReviewUpvote[]  // Upvotes given by the user to reviews
  savedBriefs           SavedBrief[]    // Briefs saved by the user
  briefViews            BriefView[]     // Briefs viewed by the user
  tokenBalance          UserToken?      // User's token balance
  tokenTransactions     TokenTransaction[]
  tokenPurchases        TokenPurchase[] // Token purchases made by the user
  reviewHelpful         ReviewHelpful[] // Reviews marked as helpful by the user
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Research AI Model information
model ResearchAIModel {
  id          String     @id @default(cuid())
  name        String     // e.g., "GPT-4", "Claude 3", etc.
  provider    String     // e.g., "OpenAI", "Anthropic", etc.
  version     String     // Version identifier
  briefs      Brief[]    // Briefs generated by this model
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, version, provider])
}

// Review AI Model information
model ReviewAIModel {
  id          String      @id @default(cuid())
  name        String      // e.g., "GPT-4", "Claude 3", etc.
  provider    String      // e.g., "OpenAI", "Anthropic", etc.
  version     String      // Version identifier
  aiReviews   AIReview[]  // AI Reviews generated by this model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, version, provider])
}

// Sources for research briefs
model Source {
  id         String    @id @default(cuid())
  title      String
  url        String
  briefs     Brief[]   // Many-to-many relation with briefs
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Research Brief (the core content type, renamed from Insight)
model Brief {
  id               String            @id @default(cuid())
  title            String
  prompt           String
  response         String
  abstract         String?           // Optional summary/abstract
  thinking         String?           // Optional AI's thinking process
  modelId          String
  model            ResearchAIModel   @relation(fields: [modelId], references: [id])
  userId           String
  author           User              @relation(fields: [userId], references: [id])
  categories       Category[]        // Many-to-many relation with categories
  sources          Source[]          // Many-to-many relation with sources
  reviews          Review[]          // User reviews
  aiReviews        AIReview[]        // AI-generated reviews
  upvotes          BriefUpvote[]     // User upvotes
  savedBy          SavedBrief[]      // Users who saved this brief
  viewedBy         BriefView[]       // Users who have viewed this brief
  tokenTransactions TokenTransaction[] // Token transactions related to this brief
  viewCount        Int               @default(0)
  readTime         Int?              // Optional estimated read time in minutes
  accuracy         Float?            // 1-5 rating based on reviews and AI reviews
  slug             String?           @unique   // Optional URL-friendly identifier
  published        Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Categories for organizing briefs
model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  briefs       Brief[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// User-generated reviews
model Review {
  id           String         @id @default(cuid())
  content      String
  rating       Int            // 1-5 star rating
  briefId      String
  brief        Brief          @relation(fields: [briefId], references: [id])
  userId       String
  author       User           @relation(fields: [userId], references: [id])
  upvotes      ReviewUpvote[] // Upvotes for this review
  helpfulMarks ReviewHelpful[] // Users who marked this review as helpful
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// AI-generated reviews
model AIReview {
  id           String         @id @default(cuid())
  content      String
  rating       Int            // 1-5 star rating
  briefId      String
  brief        Brief          @relation(fields: [briefId], references: [id])
  modelId      String
  model        ReviewAIModel  @relation(fields: [modelId], references: [id])
  requesterId  String?        // Optional reference to user who requested the review
  helpfulCount Int            @default(0)
  createdAt    DateTime       @default(now())
}

// Upvotes for briefs
model BriefUpvote {
  id         String   @id @default(cuid())
  briefId    String
  brief      Brief    @relation(fields: [briefId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([briefId, userId]) // Prevent duplicate upvotes
}

// Upvotes for reviews
model ReviewUpvote {
  id         String   @id @default(cuid())
  reviewId   String
  review     Review   @relation(fields: [reviewId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([reviewId, userId]) // Prevent duplicate upvotes
}

// Saved/Bookmarked Briefs
model SavedBrief {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  briefId    String
  brief      Brief    @relation(fields: [briefId], references: [id])
  createdAt  DateTime @default(now())
  
  @@unique([userId, briefId])
}

// Brief Views - Track which briefs a user has viewed
model BriefView {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  briefId    String
  brief      Brief    @relation(fields: [briefId], references: [id])
  createdAt  DateTime @default(now())
  
  @@unique([userId, briefId]) // Ensure one view record per user per brief
}

// User Token Balance
model UserToken {
  id         String    @id @default(cuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])
  balance    Int       @default(0)
  updatedAt  DateTime  @updatedAt
}

// Token Transactions
model TokenTransaction {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  amount     Int       // Positive for additions, negative for usage
  reason     String    // e.g., "Brief creation", "Review reward", "Upvote reward", "Purchase"
  briefId    String?   // Optional link to a brief if relevant
  brief      Brief?    @relation(fields: [briefId], references: [id])
  reviewId   String?   // Optional link to a review if relevant
  purchaseId String?   // Optional link to a purchase if relevant
  createdAt  DateTime  @default(now())
}

// Token Purchases
model TokenPurchase {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  packageName   String    // e.g., "Starter Pack", "Pro Pack"
  tokensAmount  Int       // Number of tokens purchased
  priceUSD      Float     // Price in USD
  paymentMethod String?   // e.g., "stripe", "paypal"
  paymentId     String?   // External payment reference
  status        String    @default("pending") // "pending", "completed", "failed"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Review Helpful Marks
model ReviewHelpful {
  id         String   @id @default(cuid())
  reviewId   String
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([reviewId, userId]) // Prevent duplicate helpful marks
}
