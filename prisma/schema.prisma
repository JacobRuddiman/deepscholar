

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (extends NextAuth)
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  insights      Insight[]      // Research insights created by the user
  reviews       Review[]       // Reviews created by the user
  upvotes       Upvote[]       // Upvotes given by the user
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AI Model information
model AIModel {
  id          String     @id @default(cuid())
  name        String     // e.g., "GPT-4", "Claude 3", etc.
  provider    String     // e.g., "OpenAI", "Anthropic", etc.
  version     String     // Version identifier
  insights    Insight[]  // Insights generated by this model
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, version, provider])
}

// Research Insight (the core content type)
model Insight {
  id           String     @id @default(cuid())
  title        String
  prompt       String     @db.Text
  response     String     @db.Text
  modelId      String
  model        AIModel    @relation(fields: [modelId], references: [id])
  userId       String
  author       User       @relation(fields: [userId], references: [id])
  categories   Category[] // Many-to-many relation with categories
  reviews      Review[]
  upvotes      Upvote[]
  viewCount    Int        @default(0)
  aiReview     String?    @db.Text // Optional AI-generated review
  slug         String     @unique // URL-friendly identifier
  published    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Categories for organizing insights
model Category {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  insights     Insight[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// User-generated reviews
model Review {
  id           String     @id @default(cuid())
  content      String     @db.Text
  rating       Int        // 1-5 star rating
  insightId    String
  insight      Insight    @relation(fields: [insightId], references: [id])
  userId       String
  author       User       @relation(fields: [userId], references: [id])
  helpfulCount Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Upvotes for insights
model Upvote {
  id         String   @id @default(cuid())
  insightId  String
  insight    Insight  @relation(fields: [insightId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([insightId, userId]) // Prevent duplicate upvotes
}
