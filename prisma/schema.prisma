generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model EmailFooter {
  id        String   @id @default(cuid())
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSend {
  id         String   @id @default(cuid())
  subject    String
  body       String
  footer     String
  recipients String
  sentBy     String
  sentAt     DateTime @default(now())
  sentByUser User     @relation(fields: [sentBy], references: [id])
}

model ScheduledEmail {
  id           String    @id @default(cuid())
  subject      String
  body         String
  footer       String
  recipients   String
  scheduledFor DateTime
  status       String    @default("pending")
  sentBy       String
  sentAt       DateTime?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sentByUser   User      @relation(fields: [sentBy], references: [id])

  @@index([scheduledFor])
  @@index([status])
}

model UserRecommendation {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  topCreatedCategories    Json
  topInteractedCategories Json
  topCombinedCategories   Json
  topCreatedTitleWords    Json
  topInteractedTitleWords Json
  topCombinedTitleWords   Json
  totalBriefsCreated      Int      @default(0)
  totalReviews            Int      @default(0)
  totalUpvotes            Int      @default(0)
  totalSaves              Int      @default(0)
  totalViews              Int      @default(0)
  totalReviewsReceived    Int      @default(0)
  totalUpvotesReceived    Int      @default(0)
  searchKeywords          Json
  lastSearchQueries       Json
  topInteractedUsers      Json
  topCitationDomains      Json
  avgBriefReadTime        Float?
  avgSessionDuration      Float?
  preferredTimeOfDay      String?
  engagementScore         Float?
  contentQualityScore     Float?
  lastCalculated          DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String              @id @default(cuid())
  name                     String?
  email                    String?             @unique
  emailVerified            DateTime?
  image                    String?
  isAdmin                  Boolean             @default(false)
  lastInteractionDate      DateTime?
  lastPromotionEmailDate   DateTime?
  emailNotifications       Boolean             @default(true)
  briefInterestUpdates     Boolean             @default(true)
  promotionalNotifications Boolean             @default(true)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  accounts                 Account[]
  briefs                   Brief[]
  briefUpvotes             BriefUpvote[]
  briefViews               BriefView[]
  sentEmails               EmailSend[]
  exportHistory            ExportHistory[]
  exportUsage              ExportUsage[]
  reviews                  Review[]
  reviewHelpful            ReviewHelpful[]
  reviewUpvotes            ReviewUpvote[]
  savedBriefs              SavedBrief[]
  scheduledEmails          ScheduledEmail[]
  sessions                 Session[]
  tokenPurchases           TokenPurchase[]
  tokenTransactions        TokenTransaction[]
  recommendation           UserRecommendation?
  tokenBalance             UserToken?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResearchAIModel {
  id        String   @id @default(cuid())
  name      String
  provider  String
  version   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  briefs    Brief[]

  @@unique([name, version, provider])
}

model ReviewAIModel {
  id        String     @id @default(cuid())
  name      String
  provider  String
  version   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  aiReviews AIReview[]

  @@unique([name, version, provider])
}

model Source {
  id         String           @id @default(cuid())
  title      String
  url        String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  references BriefReference[]
  briefs     Brief[]          @relation("BriefToSource")
}

model BriefReference {
  id              String   @id @default(cuid())
  briefId         String
  sourceId        String
  highlightedText String
  context         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  source          Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  brief           Brief    @relation(fields: [briefId], references: [id], onDelete: Cascade)

  @@index([briefId])
  @@index([sourceId])
}

model Brief {
  id                String             @id @default(cuid())
  title             String
  prompt            String
  response          String
  abstract          String?
  thinking          String?
  modelId           String
  userId            String
  viewCount         Int                @default(0)
  readTime          Int?
  accuracy          Float?
  slug              String?            @unique
  published         Boolean            @default(true)
  isDraft           Boolean            @default(false)
  isActive          Boolean            @default(true)
  parentBriefId     String?
  versionNumber     Int                @default(1)
  changeLog         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  aiReviews         AIReview[]
  parentBrief       Brief?             @relation("BriefVersions", fields: [parentBriefId], references: [id])
  versions          Brief[]            @relation("BriefVersions")
  author            User               @relation(fields: [userId], references: [id])
  model             ResearchAIModel    @relation(fields: [modelId], references: [id])
  references        BriefReference[]
  upvotes           BriefUpvote[]
  viewedBy          BriefView[]
  reviews           Review[]
  savedBy           SavedBrief[]
  tokenTransactions TokenTransaction[]
  categories        Category[]         @relation("BriefToCategory")
  sources           Source[]           @relation("BriefToSource")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  briefs      Brief[]  @relation("BriefToCategory")
}

model Review {
  id           String          @id @default(cuid())
  content      String
  rating       Int
  briefId      String
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  author       User            @relation(fields: [userId], references: [id])
  brief        Brief           @relation(fields: [briefId], references: [id])
  helpfulMarks ReviewHelpful[]
  upvotes      ReviewUpvote[]
}

model AIReview {
  id           String        @id @default(cuid())
  content      String
  rating       Int
  briefId      String
  modelId      String
  requesterId  String?
  helpfulCount Int           @default(0)
  createdAt    DateTime      @default(now())
  model        ReviewAIModel @relation(fields: [modelId], references: [id])
  brief        Brief         @relation(fields: [briefId], references: [id])
}

model BriefUpvote {
  id        String   @id @default(cuid())
  briefId   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  brief     Brief    @relation(fields: [briefId], references: [id])

  @@unique([briefId, userId])
}

model ReviewUpvote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])

  @@unique([reviewId, userId])
}

model SavedBrief {
  id        String   @id @default(cuid())
  userId    String
  briefId   String
  createdAt DateTime @default(now())
  brief     Brief    @relation(fields: [briefId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, briefId])
}

model BriefView {
  id        String   @id @default(cuid())
  userId    String
  briefId   String
  createdAt DateTime @default(now())
  brief     Brief    @relation(fields: [briefId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, briefId])
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model TokenTransaction {
  id         String   @id @default(cuid())
  userId     String
  amount     Int
  reason     String
  briefId    String?
  reviewId   String?
  purchaseId String?
  createdAt  DateTime @default(now())
  brief      Brief?   @relation(fields: [briefId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model TokenPurchase {
  id            String   @id @default(cuid())
  userId        String
  packageName   String
  tokensAmount  Int
  priceUSD      Float
  paymentMethod String?
  paymentId     String?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model ReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

model ExportHistory {
  id            String   @id @default(cuid())
  userId        String
  exportType    String
  exportFormat  String
  targetId      String
  filename      String
  fileSize      Int?
  status        String   @default("completed")
  options       String?
  errorMessage  String?
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model ExportUsage {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}
